/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pagisoft.datafetcher.model.allegro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Delivery extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5339633414193742930L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Delivery\",\"namespace\":\"com.pagisoft.datafetcher.model.allegro\",\"fields\":[{\"name\":\"availableForFree\",\"type\":\"boolean\"},{\"name\":\"lowestPrice\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LowestPrice\",\"fields\":[{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Delivery> ENCODER =
      new BinaryMessageEncoder<Delivery>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Delivery> DECODER =
      new BinaryMessageDecoder<Delivery>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Delivery> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Delivery> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Delivery>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Delivery to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Delivery from a ByteBuffer. */
  public static Delivery fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public boolean availableForFree;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.LowestPrice lowestPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Delivery() {}

  /**
   * All-args constructor.
   * @param availableForFree The new value for availableForFree
   * @param lowestPrice The new value for lowestPrice
   */
  public Delivery(java.lang.Boolean availableForFree, com.pagisoft.datafetcher.model.allegro.LowestPrice lowestPrice) {
    this.availableForFree = availableForFree;
    this.lowestPrice = lowestPrice;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return availableForFree;
    case 1: return lowestPrice;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: availableForFree = (java.lang.Boolean)value$; break;
    case 1: lowestPrice = (com.pagisoft.datafetcher.model.allegro.LowestPrice)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'availableForFree' field.
   * @return The value of the 'availableForFree' field.
   */
  public java.lang.Boolean getAvailableForFree() {
    return availableForFree;
  }

  /**
   * Sets the value of the 'availableForFree' field.
   * @param value the value to set.
   */
  public void setAvailableForFree(java.lang.Boolean value) {
    this.availableForFree = value;
  }

  /**
   * Gets the value of the 'lowestPrice' field.
   * @return The value of the 'lowestPrice' field.
   */
  public com.pagisoft.datafetcher.model.allegro.LowestPrice getLowestPrice() {
    return lowestPrice;
  }

  /**
   * Sets the value of the 'lowestPrice' field.
   * @param value the value to set.
   */
  public void setLowestPrice(com.pagisoft.datafetcher.model.allegro.LowestPrice value) {
    this.lowestPrice = value;
  }

  /**
   * Creates a new Delivery RecordBuilder.
   * @return A new Delivery RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Delivery.Builder newBuilder() {
    return new com.pagisoft.datafetcher.model.allegro.Delivery.Builder();
  }

  /**
   * Creates a new Delivery RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Delivery RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Delivery.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.Delivery.Builder other) {
    return new com.pagisoft.datafetcher.model.allegro.Delivery.Builder(other);
  }

  /**
   * Creates a new Delivery RecordBuilder by copying an existing Delivery instance.
   * @param other The existing instance to copy.
   * @return A new Delivery RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Delivery.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.Delivery other) {
    return new com.pagisoft.datafetcher.model.allegro.Delivery.Builder(other);
  }

  /**
   * RecordBuilder for Delivery instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Delivery>
    implements org.apache.avro.data.RecordBuilder<Delivery> {

    private boolean availableForFree;
    private com.pagisoft.datafetcher.model.allegro.LowestPrice lowestPrice;
    private com.pagisoft.datafetcher.model.allegro.LowestPrice.Builder lowestPriceBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.Delivery.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.availableForFree)) {
        this.availableForFree = data().deepCopy(fields()[0].schema(), other.availableForFree);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lowestPrice)) {
        this.lowestPrice = data().deepCopy(fields()[1].schema(), other.lowestPrice);
        fieldSetFlags()[1] = true;
      }
      if (other.hasLowestPriceBuilder()) {
        this.lowestPriceBuilder = com.pagisoft.datafetcher.model.allegro.LowestPrice.newBuilder(other.getLowestPriceBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Delivery instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.Delivery other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.availableForFree)) {
        this.availableForFree = data().deepCopy(fields()[0].schema(), other.availableForFree);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lowestPrice)) {
        this.lowestPrice = data().deepCopy(fields()[1].schema(), other.lowestPrice);
        fieldSetFlags()[1] = true;
      }
      this.lowestPriceBuilder = null;
    }

    /**
      * Gets the value of the 'availableForFree' field.
      * @return The value.
      */
    public java.lang.Boolean getAvailableForFree() {
      return availableForFree;
    }

    /**
      * Sets the value of the 'availableForFree' field.
      * @param value The value of 'availableForFree'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Delivery.Builder setAvailableForFree(boolean value) {
      validate(fields()[0], value);
      this.availableForFree = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'availableForFree' field has been set.
      * @return True if the 'availableForFree' field has been set, false otherwise.
      */
    public boolean hasAvailableForFree() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'availableForFree' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Delivery.Builder clearAvailableForFree() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lowestPrice' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.LowestPrice getLowestPrice() {
      return lowestPrice;
    }

    /**
      * Sets the value of the 'lowestPrice' field.
      * @param value The value of 'lowestPrice'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Delivery.Builder setLowestPrice(com.pagisoft.datafetcher.model.allegro.LowestPrice value) {
      validate(fields()[1], value);
      this.lowestPriceBuilder = null;
      this.lowestPrice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lowestPrice' field has been set.
      * @return True if the 'lowestPrice' field has been set, false otherwise.
      */
    public boolean hasLowestPrice() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'lowestPrice' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.LowestPrice.Builder getLowestPriceBuilder() {
      if (lowestPriceBuilder == null) {
        if (hasLowestPrice()) {
          setLowestPriceBuilder(com.pagisoft.datafetcher.model.allegro.LowestPrice.newBuilder(lowestPrice));
        } else {
          setLowestPriceBuilder(com.pagisoft.datafetcher.model.allegro.LowestPrice.newBuilder());
        }
      }
      return lowestPriceBuilder;
    }

    /**
     * Sets the Builder instance for the 'lowestPrice' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Delivery.Builder setLowestPriceBuilder(com.pagisoft.datafetcher.model.allegro.LowestPrice.Builder value) {
      clearLowestPrice();
      lowestPriceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lowestPrice' field has an active Builder instance
     * @return True if the 'lowestPrice' field has an active Builder instance
     */
    public boolean hasLowestPriceBuilder() {
      return lowestPriceBuilder != null;
    }

    /**
      * Clears the value of the 'lowestPrice' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Delivery.Builder clearLowestPrice() {
      lowestPrice = null;
      lowestPriceBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Delivery build() {
      try {
        Delivery record = new Delivery();
        record.availableForFree = fieldSetFlags()[0] ? this.availableForFree : (java.lang.Boolean) defaultValue(fields()[0]);
        if (lowestPriceBuilder != null) {
          record.lowestPrice = this.lowestPriceBuilder.build();
        } else {
          record.lowestPrice = fieldSetFlags()[1] ? this.lowestPrice : (com.pagisoft.datafetcher.model.allegro.LowestPrice) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Delivery>
    WRITER$ = (org.apache.avro.io.DatumWriter<Delivery>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Delivery>
    READER$ = (org.apache.avro.io.DatumReader<Delivery>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
