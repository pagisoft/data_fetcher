/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pagisoft.datafetcher.model.allegro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Item extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8138505950298213330L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"com.pagisoft.datafetcher.model.allegro\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"seller\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Seller\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"company\",\"type\":\"boolean\"},{\"name\":\"superSeller\",\"type\":\"boolean\"}]}]},{\"name\":\"promotion\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Promotion\",\"fields\":[{\"name\":\"emphasized\",\"type\":\"boolean\"},{\"name\":\"bold\",\"type\":\"boolean\"},{\"name\":\"highlight\",\"type\":\"boolean\"}]}]},{\"name\":\"delivery\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Delivery\",\"fields\":[{\"name\":\"availableForFree\",\"type\":\"boolean\"},{\"name\":\"lowestPrice\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LowestPrice\",\"fields\":[{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}]}]},{\"name\":\"images\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Url\",\"fields\":[{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}},{\"name\":\"sellingMode\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SellingMode\",\"fields\":[{\"name\":\"format\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Price\",\"fields\":[{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"fixedPrice\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FixedPrice\",\"fields\":[{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"popularity\",\"type\":\"long\"},{\"name\":\"bidCount\",\"type\":\"long\"}]}]},{\"name\":\"stock\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Stock\",\"fields\":[{\"name\":\"unit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"available\",\"type\":\"long\"}]}]},{\"name\":\"vendor\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Vendor\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"category\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Category\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"publication\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Publication\",\"fields\":[{\"name\":\"endingAt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Item> ENCODER =
      new BinaryMessageEncoder<Item>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Item> DECODER =
      new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Item> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Item> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Item to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Item from a ByteBuffer. */
  public static Item fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.String name;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Seller seller;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Promotion promotion;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Delivery delivery;
  @Deprecated public java.util.List<com.pagisoft.datafetcher.model.allegro.Url> images;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.SellingMode sellingMode;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Stock stock;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Vendor vendor;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Category category;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Publication publication;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Item() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param seller The new value for seller
   * @param promotion The new value for promotion
   * @param delivery The new value for delivery
   * @param images The new value for images
   * @param sellingMode The new value for sellingMode
   * @param stock The new value for stock
   * @param vendor The new value for vendor
   * @param category The new value for category
   * @param publication The new value for publication
   */
  public Item(java.lang.String id, java.lang.String name, com.pagisoft.datafetcher.model.allegro.Seller seller, com.pagisoft.datafetcher.model.allegro.Promotion promotion, com.pagisoft.datafetcher.model.allegro.Delivery delivery, java.util.List<com.pagisoft.datafetcher.model.allegro.Url> images, com.pagisoft.datafetcher.model.allegro.SellingMode sellingMode, com.pagisoft.datafetcher.model.allegro.Stock stock, com.pagisoft.datafetcher.model.allegro.Vendor vendor, com.pagisoft.datafetcher.model.allegro.Category category, com.pagisoft.datafetcher.model.allegro.Publication publication) {
    this.id = id;
    this.name = name;
    this.seller = seller;
    this.promotion = promotion;
    this.delivery = delivery;
    this.images = images;
    this.sellingMode = sellingMode;
    this.stock = stock;
    this.vendor = vendor;
    this.category = category;
    this.publication = publication;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return seller;
    case 3: return promotion;
    case 4: return delivery;
    case 5: return images;
    case 6: return sellingMode;
    case 7: return stock;
    case 8: return vendor;
    case 9: return category;
    case 10: return publication;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: seller = (com.pagisoft.datafetcher.model.allegro.Seller)value$; break;
    case 3: promotion = (com.pagisoft.datafetcher.model.allegro.Promotion)value$; break;
    case 4: delivery = (com.pagisoft.datafetcher.model.allegro.Delivery)value$; break;
    case 5: images = (java.util.List<com.pagisoft.datafetcher.model.allegro.Url>)value$; break;
    case 6: sellingMode = (com.pagisoft.datafetcher.model.allegro.SellingMode)value$; break;
    case 7: stock = (com.pagisoft.datafetcher.model.allegro.Stock)value$; break;
    case 8: vendor = (com.pagisoft.datafetcher.model.allegro.Vendor)value$; break;
    case 9: category = (com.pagisoft.datafetcher.model.allegro.Category)value$; break;
    case 10: publication = (com.pagisoft.datafetcher.model.allegro.Publication)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'seller' field.
   * @return The value of the 'seller' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Seller getSeller() {
    return seller;
  }

  /**
   * Sets the value of the 'seller' field.
   * @param value the value to set.
   */
  public void setSeller(com.pagisoft.datafetcher.model.allegro.Seller value) {
    this.seller = value;
  }

  /**
   * Gets the value of the 'promotion' field.
   * @return The value of the 'promotion' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Promotion getPromotion() {
    return promotion;
  }

  /**
   * Sets the value of the 'promotion' field.
   * @param value the value to set.
   */
  public void setPromotion(com.pagisoft.datafetcher.model.allegro.Promotion value) {
    this.promotion = value;
  }

  /**
   * Gets the value of the 'delivery' field.
   * @return The value of the 'delivery' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Delivery getDelivery() {
    return delivery;
  }

  /**
   * Sets the value of the 'delivery' field.
   * @param value the value to set.
   */
  public void setDelivery(com.pagisoft.datafetcher.model.allegro.Delivery value) {
    this.delivery = value;
  }

  /**
   * Gets the value of the 'images' field.
   * @return The value of the 'images' field.
   */
  public java.util.List<com.pagisoft.datafetcher.model.allegro.Url> getImages() {
    return images;
  }

  /**
   * Sets the value of the 'images' field.
   * @param value the value to set.
   */
  public void setImages(java.util.List<com.pagisoft.datafetcher.model.allegro.Url> value) {
    this.images = value;
  }

  /**
   * Gets the value of the 'sellingMode' field.
   * @return The value of the 'sellingMode' field.
   */
  public com.pagisoft.datafetcher.model.allegro.SellingMode getSellingMode() {
    return sellingMode;
  }

  /**
   * Sets the value of the 'sellingMode' field.
   * @param value the value to set.
   */
  public void setSellingMode(com.pagisoft.datafetcher.model.allegro.SellingMode value) {
    this.sellingMode = value;
  }

  /**
   * Gets the value of the 'stock' field.
   * @return The value of the 'stock' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Stock getStock() {
    return stock;
  }

  /**
   * Sets the value of the 'stock' field.
   * @param value the value to set.
   */
  public void setStock(com.pagisoft.datafetcher.model.allegro.Stock value) {
    this.stock = value;
  }

  /**
   * Gets the value of the 'vendor' field.
   * @return The value of the 'vendor' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Vendor getVendor() {
    return vendor;
  }

  /**
   * Sets the value of the 'vendor' field.
   * @param value the value to set.
   */
  public void setVendor(com.pagisoft.datafetcher.model.allegro.Vendor value) {
    this.vendor = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Category getCategory() {
    return category;
  }

  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(com.pagisoft.datafetcher.model.allegro.Category value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'publication' field.
   * @return The value of the 'publication' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Publication getPublication() {
    return publication;
  }

  /**
   * Sets the value of the 'publication' field.
   * @param value the value to set.
   */
  public void setPublication(com.pagisoft.datafetcher.model.allegro.Publication value) {
    this.publication = value;
  }

  /**
   * Creates a new Item RecordBuilder.
   * @return A new Item RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Item.Builder newBuilder() {
    return new com.pagisoft.datafetcher.model.allegro.Item.Builder();
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Item RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Item.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.Item.Builder other) {
    return new com.pagisoft.datafetcher.model.allegro.Item.Builder(other);
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Item instance.
   * @param other The existing instance to copy.
   * @return A new Item RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Item.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.Item other) {
    return new com.pagisoft.datafetcher.model.allegro.Item.Builder(other);
  }

  /**
   * RecordBuilder for Item instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Item>
    implements org.apache.avro.data.RecordBuilder<Item> {

    private java.lang.String id;
    private java.lang.String name;
    private com.pagisoft.datafetcher.model.allegro.Seller seller;
    private com.pagisoft.datafetcher.model.allegro.Seller.Builder sellerBuilder;
    private com.pagisoft.datafetcher.model.allegro.Promotion promotion;
    private com.pagisoft.datafetcher.model.allegro.Promotion.Builder promotionBuilder;
    private com.pagisoft.datafetcher.model.allegro.Delivery delivery;
    private com.pagisoft.datafetcher.model.allegro.Delivery.Builder deliveryBuilder;
    private java.util.List<com.pagisoft.datafetcher.model.allegro.Url> images;
    private com.pagisoft.datafetcher.model.allegro.SellingMode sellingMode;
    private com.pagisoft.datafetcher.model.allegro.SellingMode.Builder sellingModeBuilder;
    private com.pagisoft.datafetcher.model.allegro.Stock stock;
    private com.pagisoft.datafetcher.model.allegro.Stock.Builder stockBuilder;
    private com.pagisoft.datafetcher.model.allegro.Vendor vendor;
    private com.pagisoft.datafetcher.model.allegro.Vendor.Builder vendorBuilder;
    private com.pagisoft.datafetcher.model.allegro.Category category;
    private com.pagisoft.datafetcher.model.allegro.Category.Builder categoryBuilder;
    private com.pagisoft.datafetcher.model.allegro.Publication publication;
    private com.pagisoft.datafetcher.model.allegro.Publication.Builder publicationBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.Item.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.seller)) {
        this.seller = data().deepCopy(fields()[2].schema(), other.seller);
        fieldSetFlags()[2] = true;
      }
      if (other.hasSellerBuilder()) {
        this.sellerBuilder = com.pagisoft.datafetcher.model.allegro.Seller.newBuilder(other.getSellerBuilder());
      }
      if (isValidValue(fields()[3], other.promotion)) {
        this.promotion = data().deepCopy(fields()[3].schema(), other.promotion);
        fieldSetFlags()[3] = true;
      }
      if (other.hasPromotionBuilder()) {
        this.promotionBuilder = com.pagisoft.datafetcher.model.allegro.Promotion.newBuilder(other.getPromotionBuilder());
      }
      if (isValidValue(fields()[4], other.delivery)) {
        this.delivery = data().deepCopy(fields()[4].schema(), other.delivery);
        fieldSetFlags()[4] = true;
      }
      if (other.hasDeliveryBuilder()) {
        this.deliveryBuilder = com.pagisoft.datafetcher.model.allegro.Delivery.newBuilder(other.getDeliveryBuilder());
      }
      if (isValidValue(fields()[5], other.images)) {
        this.images = data().deepCopy(fields()[5].schema(), other.images);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sellingMode)) {
        this.sellingMode = data().deepCopy(fields()[6].schema(), other.sellingMode);
        fieldSetFlags()[6] = true;
      }
      if (other.hasSellingModeBuilder()) {
        this.sellingModeBuilder = com.pagisoft.datafetcher.model.allegro.SellingMode.newBuilder(other.getSellingModeBuilder());
      }
      if (isValidValue(fields()[7], other.stock)) {
        this.stock = data().deepCopy(fields()[7].schema(), other.stock);
        fieldSetFlags()[7] = true;
      }
      if (other.hasStockBuilder()) {
        this.stockBuilder = com.pagisoft.datafetcher.model.allegro.Stock.newBuilder(other.getStockBuilder());
      }
      if (isValidValue(fields()[8], other.vendor)) {
        this.vendor = data().deepCopy(fields()[8].schema(), other.vendor);
        fieldSetFlags()[8] = true;
      }
      if (other.hasVendorBuilder()) {
        this.vendorBuilder = com.pagisoft.datafetcher.model.allegro.Vendor.newBuilder(other.getVendorBuilder());
      }
      if (isValidValue(fields()[9], other.category)) {
        this.category = data().deepCopy(fields()[9].schema(), other.category);
        fieldSetFlags()[9] = true;
      }
      if (other.hasCategoryBuilder()) {
        this.categoryBuilder = com.pagisoft.datafetcher.model.allegro.Category.newBuilder(other.getCategoryBuilder());
      }
      if (isValidValue(fields()[10], other.publication)) {
        this.publication = data().deepCopy(fields()[10].schema(), other.publication);
        fieldSetFlags()[10] = true;
      }
      if (other.hasPublicationBuilder()) {
        this.publicationBuilder = com.pagisoft.datafetcher.model.allegro.Publication.newBuilder(other.getPublicationBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Item instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.Item other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.seller)) {
        this.seller = data().deepCopy(fields()[2].schema(), other.seller);
        fieldSetFlags()[2] = true;
      }
      this.sellerBuilder = null;
      if (isValidValue(fields()[3], other.promotion)) {
        this.promotion = data().deepCopy(fields()[3].schema(), other.promotion);
        fieldSetFlags()[3] = true;
      }
      this.promotionBuilder = null;
      if (isValidValue(fields()[4], other.delivery)) {
        this.delivery = data().deepCopy(fields()[4].schema(), other.delivery);
        fieldSetFlags()[4] = true;
      }
      this.deliveryBuilder = null;
      if (isValidValue(fields()[5], other.images)) {
        this.images = data().deepCopy(fields()[5].schema(), other.images);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sellingMode)) {
        this.sellingMode = data().deepCopy(fields()[6].schema(), other.sellingMode);
        fieldSetFlags()[6] = true;
      }
      this.sellingModeBuilder = null;
      if (isValidValue(fields()[7], other.stock)) {
        this.stock = data().deepCopy(fields()[7].schema(), other.stock);
        fieldSetFlags()[7] = true;
      }
      this.stockBuilder = null;
      if (isValidValue(fields()[8], other.vendor)) {
        this.vendor = data().deepCopy(fields()[8].schema(), other.vendor);
        fieldSetFlags()[8] = true;
      }
      this.vendorBuilder = null;
      if (isValidValue(fields()[9], other.category)) {
        this.category = data().deepCopy(fields()[9].schema(), other.category);
        fieldSetFlags()[9] = true;
      }
      this.categoryBuilder = null;
      if (isValidValue(fields()[10], other.publication)) {
        this.publication = data().deepCopy(fields()[10].schema(), other.publication);
        fieldSetFlags()[10] = true;
      }
      this.publicationBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'seller' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Seller getSeller() {
      return seller;
    }

    /**
      * Sets the value of the 'seller' field.
      * @param value The value of 'seller'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setSeller(com.pagisoft.datafetcher.model.allegro.Seller value) {
      validate(fields()[2], value);
      this.sellerBuilder = null;
      this.seller = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'seller' field has been set.
      * @return True if the 'seller' field has been set, false otherwise.
      */
    public boolean hasSeller() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'seller' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Seller.Builder getSellerBuilder() {
      if (sellerBuilder == null) {
        if (hasSeller()) {
          setSellerBuilder(com.pagisoft.datafetcher.model.allegro.Seller.newBuilder(seller));
        } else {
          setSellerBuilder(com.pagisoft.datafetcher.model.allegro.Seller.newBuilder());
        }
      }
      return sellerBuilder;
    }

    /**
     * Sets the Builder instance for the 'seller' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setSellerBuilder(com.pagisoft.datafetcher.model.allegro.Seller.Builder value) {
      clearSeller();
      sellerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'seller' field has an active Builder instance
     * @return True if the 'seller' field has an active Builder instance
     */
    public boolean hasSellerBuilder() {
      return sellerBuilder != null;
    }

    /**
      * Clears the value of the 'seller' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearSeller() {
      seller = null;
      sellerBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'promotion' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Promotion getPromotion() {
      return promotion;
    }

    /**
      * Sets the value of the 'promotion' field.
      * @param value The value of 'promotion'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setPromotion(com.pagisoft.datafetcher.model.allegro.Promotion value) {
      validate(fields()[3], value);
      this.promotionBuilder = null;
      this.promotion = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'promotion' field has been set.
      * @return True if the 'promotion' field has been set, false otherwise.
      */
    public boolean hasPromotion() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'promotion' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Promotion.Builder getPromotionBuilder() {
      if (promotionBuilder == null) {
        if (hasPromotion()) {
          setPromotionBuilder(com.pagisoft.datafetcher.model.allegro.Promotion.newBuilder(promotion));
        } else {
          setPromotionBuilder(com.pagisoft.datafetcher.model.allegro.Promotion.newBuilder());
        }
      }
      return promotionBuilder;
    }

    /**
     * Sets the Builder instance for the 'promotion' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setPromotionBuilder(com.pagisoft.datafetcher.model.allegro.Promotion.Builder value) {
      clearPromotion();
      promotionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'promotion' field has an active Builder instance
     * @return True if the 'promotion' field has an active Builder instance
     */
    public boolean hasPromotionBuilder() {
      return promotionBuilder != null;
    }

    /**
      * Clears the value of the 'promotion' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearPromotion() {
      promotion = null;
      promotionBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'delivery' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Delivery getDelivery() {
      return delivery;
    }

    /**
      * Sets the value of the 'delivery' field.
      * @param value The value of 'delivery'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setDelivery(com.pagisoft.datafetcher.model.allegro.Delivery value) {
      validate(fields()[4], value);
      this.deliveryBuilder = null;
      this.delivery = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'delivery' field has been set.
      * @return True if the 'delivery' field has been set, false otherwise.
      */
    public boolean hasDelivery() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'delivery' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Delivery.Builder getDeliveryBuilder() {
      if (deliveryBuilder == null) {
        if (hasDelivery()) {
          setDeliveryBuilder(com.pagisoft.datafetcher.model.allegro.Delivery.newBuilder(delivery));
        } else {
          setDeliveryBuilder(com.pagisoft.datafetcher.model.allegro.Delivery.newBuilder());
        }
      }
      return deliveryBuilder;
    }

    /**
     * Sets the Builder instance for the 'delivery' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setDeliveryBuilder(com.pagisoft.datafetcher.model.allegro.Delivery.Builder value) {
      clearDelivery();
      deliveryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'delivery' field has an active Builder instance
     * @return True if the 'delivery' field has an active Builder instance
     */
    public boolean hasDeliveryBuilder() {
      return deliveryBuilder != null;
    }

    /**
      * Clears the value of the 'delivery' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearDelivery() {
      delivery = null;
      deliveryBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'images' field.
      * @return The value.
      */
    public java.util.List<com.pagisoft.datafetcher.model.allegro.Url> getImages() {
      return images;
    }

    /**
      * Sets the value of the 'images' field.
      * @param value The value of 'images'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setImages(java.util.List<com.pagisoft.datafetcher.model.allegro.Url> value) {
      validate(fields()[5], value);
      this.images = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'images' field has been set.
      * @return True if the 'images' field has been set, false otherwise.
      */
    public boolean hasImages() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'images' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearImages() {
      images = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellingMode' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode getSellingMode() {
      return sellingMode;
    }

    /**
      * Sets the value of the 'sellingMode' field.
      * @param value The value of 'sellingMode'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setSellingMode(com.pagisoft.datafetcher.model.allegro.SellingMode value) {
      validate(fields()[6], value);
      this.sellingModeBuilder = null;
      this.sellingMode = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sellingMode' field has been set.
      * @return True if the 'sellingMode' field has been set, false otherwise.
      */
    public boolean hasSellingMode() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'sellingMode' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder getSellingModeBuilder() {
      if (sellingModeBuilder == null) {
        if (hasSellingMode()) {
          setSellingModeBuilder(com.pagisoft.datafetcher.model.allegro.SellingMode.newBuilder(sellingMode));
        } else {
          setSellingModeBuilder(com.pagisoft.datafetcher.model.allegro.SellingMode.newBuilder());
        }
      }
      return sellingModeBuilder;
    }

    /**
     * Sets the Builder instance for the 'sellingMode' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setSellingModeBuilder(com.pagisoft.datafetcher.model.allegro.SellingMode.Builder value) {
      clearSellingMode();
      sellingModeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sellingMode' field has an active Builder instance
     * @return True if the 'sellingMode' field has an active Builder instance
     */
    public boolean hasSellingModeBuilder() {
      return sellingModeBuilder != null;
    }

    /**
      * Clears the value of the 'sellingMode' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearSellingMode() {
      sellingMode = null;
      sellingModeBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'stock' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Stock getStock() {
      return stock;
    }

    /**
      * Sets the value of the 'stock' field.
      * @param value The value of 'stock'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setStock(com.pagisoft.datafetcher.model.allegro.Stock value) {
      validate(fields()[7], value);
      this.stockBuilder = null;
      this.stock = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'stock' field has been set.
      * @return True if the 'stock' field has been set, false otherwise.
      */
    public boolean hasStock() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'stock' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Stock.Builder getStockBuilder() {
      if (stockBuilder == null) {
        if (hasStock()) {
          setStockBuilder(com.pagisoft.datafetcher.model.allegro.Stock.newBuilder(stock));
        } else {
          setStockBuilder(com.pagisoft.datafetcher.model.allegro.Stock.newBuilder());
        }
      }
      return stockBuilder;
    }

    /**
     * Sets the Builder instance for the 'stock' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setStockBuilder(com.pagisoft.datafetcher.model.allegro.Stock.Builder value) {
      clearStock();
      stockBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'stock' field has an active Builder instance
     * @return True if the 'stock' field has an active Builder instance
     */
    public boolean hasStockBuilder() {
      return stockBuilder != null;
    }

    /**
      * Clears the value of the 'stock' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearStock() {
      stock = null;
      stockBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'vendor' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Vendor getVendor() {
      return vendor;
    }

    /**
      * Sets the value of the 'vendor' field.
      * @param value The value of 'vendor'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setVendor(com.pagisoft.datafetcher.model.allegro.Vendor value) {
      validate(fields()[8], value);
      this.vendorBuilder = null;
      this.vendor = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'vendor' field has been set.
      * @return True if the 'vendor' field has been set, false otherwise.
      */
    public boolean hasVendor() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'vendor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Vendor.Builder getVendorBuilder() {
      if (vendorBuilder == null) {
        if (hasVendor()) {
          setVendorBuilder(com.pagisoft.datafetcher.model.allegro.Vendor.newBuilder(vendor));
        } else {
          setVendorBuilder(com.pagisoft.datafetcher.model.allegro.Vendor.newBuilder());
        }
      }
      return vendorBuilder;
    }

    /**
     * Sets the Builder instance for the 'vendor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setVendorBuilder(com.pagisoft.datafetcher.model.allegro.Vendor.Builder value) {
      clearVendor();
      vendorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'vendor' field has an active Builder instance
     * @return True if the 'vendor' field has an active Builder instance
     */
    public boolean hasVendorBuilder() {
      return vendorBuilder != null;
    }

    /**
      * Clears the value of the 'vendor' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearVendor() {
      vendor = null;
      vendorBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Category getCategory() {
      return category;
    }

    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setCategory(com.pagisoft.datafetcher.model.allegro.Category value) {
      validate(fields()[9], value);
      this.categoryBuilder = null;
      this.category = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'category' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Category.Builder getCategoryBuilder() {
      if (categoryBuilder == null) {
        if (hasCategory()) {
          setCategoryBuilder(com.pagisoft.datafetcher.model.allegro.Category.newBuilder(category));
        } else {
          setCategoryBuilder(com.pagisoft.datafetcher.model.allegro.Category.newBuilder());
        }
      }
      return categoryBuilder;
    }

    /**
     * Sets the Builder instance for the 'category' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setCategoryBuilder(com.pagisoft.datafetcher.model.allegro.Category.Builder value) {
      clearCategory();
      categoryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'category' field has an active Builder instance
     * @return True if the 'category' field has an active Builder instance
     */
    public boolean hasCategoryBuilder() {
      return categoryBuilder != null;
    }

    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearCategory() {
      category = null;
      categoryBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'publication' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Publication getPublication() {
      return publication;
    }

    /**
      * Sets the value of the 'publication' field.
      * @param value The value of 'publication'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setPublication(com.pagisoft.datafetcher.model.allegro.Publication value) {
      validate(fields()[10], value);
      this.publicationBuilder = null;
      this.publication = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'publication' field has been set.
      * @return True if the 'publication' field has been set, false otherwise.
      */
    public boolean hasPublication() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'publication' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Publication.Builder getPublicationBuilder() {
      if (publicationBuilder == null) {
        if (hasPublication()) {
          setPublicationBuilder(com.pagisoft.datafetcher.model.allegro.Publication.newBuilder(publication));
        } else {
          setPublicationBuilder(com.pagisoft.datafetcher.model.allegro.Publication.newBuilder());
        }
      }
      return publicationBuilder;
    }

    /**
     * Sets the Builder instance for the 'publication' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder setPublicationBuilder(com.pagisoft.datafetcher.model.allegro.Publication.Builder value) {
      clearPublication();
      publicationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'publication' field has an active Builder instance
     * @return True if the 'publication' field has an active Builder instance
     */
    public boolean hasPublicationBuilder() {
      return publicationBuilder != null;
    }

    /**
      * Clears the value of the 'publication' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Item.Builder clearPublication() {
      publication = null;
      publicationBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Item build() {
      try {
        Item record = new Item();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        if (sellerBuilder != null) {
          record.seller = this.sellerBuilder.build();
        } else {
          record.seller = fieldSetFlags()[2] ? this.seller : (com.pagisoft.datafetcher.model.allegro.Seller) defaultValue(fields()[2]);
        }
        if (promotionBuilder != null) {
          record.promotion = this.promotionBuilder.build();
        } else {
          record.promotion = fieldSetFlags()[3] ? this.promotion : (com.pagisoft.datafetcher.model.allegro.Promotion) defaultValue(fields()[3]);
        }
        if (deliveryBuilder != null) {
          record.delivery = this.deliveryBuilder.build();
        } else {
          record.delivery = fieldSetFlags()[4] ? this.delivery : (com.pagisoft.datafetcher.model.allegro.Delivery) defaultValue(fields()[4]);
        }
        record.images = fieldSetFlags()[5] ? this.images : (java.util.List<com.pagisoft.datafetcher.model.allegro.Url>) defaultValue(fields()[5]);
        if (sellingModeBuilder != null) {
          record.sellingMode = this.sellingModeBuilder.build();
        } else {
          record.sellingMode = fieldSetFlags()[6] ? this.sellingMode : (com.pagisoft.datafetcher.model.allegro.SellingMode) defaultValue(fields()[6]);
        }
        if (stockBuilder != null) {
          record.stock = this.stockBuilder.build();
        } else {
          record.stock = fieldSetFlags()[7] ? this.stock : (com.pagisoft.datafetcher.model.allegro.Stock) defaultValue(fields()[7]);
        }
        if (vendorBuilder != null) {
          record.vendor = this.vendorBuilder.build();
        } else {
          record.vendor = fieldSetFlags()[8] ? this.vendor : (com.pagisoft.datafetcher.model.allegro.Vendor) defaultValue(fields()[8]);
        }
        if (categoryBuilder != null) {
          record.category = this.categoryBuilder.build();
        } else {
          record.category = fieldSetFlags()[9] ? this.category : (com.pagisoft.datafetcher.model.allegro.Category) defaultValue(fields()[9]);
        }
        if (publicationBuilder != null) {
          record.publication = this.publicationBuilder.build();
        } else {
          record.publication = fieldSetFlags()[10] ? this.publication : (com.pagisoft.datafetcher.model.allegro.Publication) defaultValue(fields()[10]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Item>
    WRITER$ = (org.apache.avro.io.DatumWriter<Item>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Item>
    READER$ = (org.apache.avro.io.DatumReader<Item>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
