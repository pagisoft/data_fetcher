/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pagisoft.datafetcher.model.allegro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SellingMode extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5491065590747912846L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SellingMode\",\"namespace\":\"com.pagisoft.datafetcher.model.allegro\",\"fields\":[{\"name\":\"format\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Price\",\"fields\":[{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"fixedPrice\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FixedPrice\",\"fields\":[{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"popularity\",\"type\":\"long\"},{\"name\":\"bidCount\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SellingMode> ENCODER =
      new BinaryMessageEncoder<SellingMode>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SellingMode> DECODER =
      new BinaryMessageDecoder<SellingMode>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SellingMode> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SellingMode> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SellingMode>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SellingMode to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SellingMode from a ByteBuffer. */
  public static SellingMode fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String format;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.Price price;
  @Deprecated public com.pagisoft.datafetcher.model.allegro.FixedPrice fixedPrice;
  @Deprecated public long popularity;
  @Deprecated public long bidCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SellingMode() {}

  /**
   * All-args constructor.
   * @param format The new value for format
   * @param price The new value for price
   * @param fixedPrice The new value for fixedPrice
   * @param popularity The new value for popularity
   * @param bidCount The new value for bidCount
   */
  public SellingMode(java.lang.String format, com.pagisoft.datafetcher.model.allegro.Price price, com.pagisoft.datafetcher.model.allegro.FixedPrice fixedPrice, java.lang.Long popularity, java.lang.Long bidCount) {
    this.format = format;
    this.price = price;
    this.fixedPrice = fixedPrice;
    this.popularity = popularity;
    this.bidCount = bidCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return format;
    case 1: return price;
    case 2: return fixedPrice;
    case 3: return popularity;
    case 4: return bidCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: format = (java.lang.String)value$; break;
    case 1: price = (com.pagisoft.datafetcher.model.allegro.Price)value$; break;
    case 2: fixedPrice = (com.pagisoft.datafetcher.model.allegro.FixedPrice)value$; break;
    case 3: popularity = (java.lang.Long)value$; break;
    case 4: bidCount = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'format' field.
   * @return The value of the 'format' field.
   */
  public java.lang.String getFormat() {
    return format;
  }

  /**
   * Sets the value of the 'format' field.
   * @param value the value to set.
   */
  public void setFormat(java.lang.String value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public com.pagisoft.datafetcher.model.allegro.Price getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(com.pagisoft.datafetcher.model.allegro.Price value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'fixedPrice' field.
   * @return The value of the 'fixedPrice' field.
   */
  public com.pagisoft.datafetcher.model.allegro.FixedPrice getFixedPrice() {
    return fixedPrice;
  }

  /**
   * Sets the value of the 'fixedPrice' field.
   * @param value the value to set.
   */
  public void setFixedPrice(com.pagisoft.datafetcher.model.allegro.FixedPrice value) {
    this.fixedPrice = value;
  }

  /**
   * Gets the value of the 'popularity' field.
   * @return The value of the 'popularity' field.
   */
  public java.lang.Long getPopularity() {
    return popularity;
  }

  /**
   * Sets the value of the 'popularity' field.
   * @param value the value to set.
   */
  public void setPopularity(java.lang.Long value) {
    this.popularity = value;
  }

  /**
   * Gets the value of the 'bidCount' field.
   * @return The value of the 'bidCount' field.
   */
  public java.lang.Long getBidCount() {
    return bidCount;
  }

  /**
   * Sets the value of the 'bidCount' field.
   * @param value the value to set.
   */
  public void setBidCount(java.lang.Long value) {
    this.bidCount = value;
  }

  /**
   * Creates a new SellingMode RecordBuilder.
   * @return A new SellingMode RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.SellingMode.Builder newBuilder() {
    return new com.pagisoft.datafetcher.model.allegro.SellingMode.Builder();
  }

  /**
   * Creates a new SellingMode RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SellingMode RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.SellingMode.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.SellingMode.Builder other) {
    return new com.pagisoft.datafetcher.model.allegro.SellingMode.Builder(other);
  }

  /**
   * Creates a new SellingMode RecordBuilder by copying an existing SellingMode instance.
   * @param other The existing instance to copy.
   * @return A new SellingMode RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.SellingMode.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.SellingMode other) {
    return new com.pagisoft.datafetcher.model.allegro.SellingMode.Builder(other);
  }

  /**
   * RecordBuilder for SellingMode instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SellingMode>
    implements org.apache.avro.data.RecordBuilder<SellingMode> {

    private java.lang.String format;
    private com.pagisoft.datafetcher.model.allegro.Price price;
    private com.pagisoft.datafetcher.model.allegro.Price.Builder priceBuilder;
    private com.pagisoft.datafetcher.model.allegro.FixedPrice fixedPrice;
    private com.pagisoft.datafetcher.model.allegro.FixedPrice.Builder fixedPriceBuilder;
    private long popularity;
    private long bidCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.SellingMode.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.format)) {
        this.format = data().deepCopy(fields()[0].schema(), other.format);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (other.hasPriceBuilder()) {
        this.priceBuilder = com.pagisoft.datafetcher.model.allegro.Price.newBuilder(other.getPriceBuilder());
      }
      if (isValidValue(fields()[2], other.fixedPrice)) {
        this.fixedPrice = data().deepCopy(fields()[2].schema(), other.fixedPrice);
        fieldSetFlags()[2] = true;
      }
      if (other.hasFixedPriceBuilder()) {
        this.fixedPriceBuilder = com.pagisoft.datafetcher.model.allegro.FixedPrice.newBuilder(other.getFixedPriceBuilder());
      }
      if (isValidValue(fields()[3], other.popularity)) {
        this.popularity = data().deepCopy(fields()[3].schema(), other.popularity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bidCount)) {
        this.bidCount = data().deepCopy(fields()[4].schema(), other.bidCount);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SellingMode instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.SellingMode other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.format)) {
        this.format = data().deepCopy(fields()[0].schema(), other.format);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      this.priceBuilder = null;
      if (isValidValue(fields()[2], other.fixedPrice)) {
        this.fixedPrice = data().deepCopy(fields()[2].schema(), other.fixedPrice);
        fieldSetFlags()[2] = true;
      }
      this.fixedPriceBuilder = null;
      if (isValidValue(fields()[3], other.popularity)) {
        this.popularity = data().deepCopy(fields()[3].schema(), other.popularity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bidCount)) {
        this.bidCount = data().deepCopy(fields()[4].schema(), other.bidCount);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'format' field.
      * @return The value.
      */
    public java.lang.String getFormat() {
      return format;
    }

    /**
      * Sets the value of the 'format' field.
      * @param value The value of 'format'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder setFormat(java.lang.String value) {
      validate(fields()[0], value);
      this.format = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'format' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder clearFormat() {
      format = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.Price getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder setPrice(com.pagisoft.datafetcher.model.allegro.Price value) {
      validate(fields()[1], value);
      this.priceBuilder = null;
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'price' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.Price.Builder getPriceBuilder() {
      if (priceBuilder == null) {
        if (hasPrice()) {
          setPriceBuilder(com.pagisoft.datafetcher.model.allegro.Price.newBuilder(price));
        } else {
          setPriceBuilder(com.pagisoft.datafetcher.model.allegro.Price.newBuilder());
        }
      }
      return priceBuilder;
    }

    /**
     * Sets the Builder instance for the 'price' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder setPriceBuilder(com.pagisoft.datafetcher.model.allegro.Price.Builder value) {
      clearPrice();
      priceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'price' field has an active Builder instance
     * @return True if the 'price' field has an active Builder instance
     */
    public boolean hasPriceBuilder() {
      return priceBuilder != null;
    }

    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder clearPrice() {
      price = null;
      priceBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fixedPrice' field.
      * @return The value.
      */
    public com.pagisoft.datafetcher.model.allegro.FixedPrice getFixedPrice() {
      return fixedPrice;
    }

    /**
      * Sets the value of the 'fixedPrice' field.
      * @param value The value of 'fixedPrice'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder setFixedPrice(com.pagisoft.datafetcher.model.allegro.FixedPrice value) {
      validate(fields()[2], value);
      this.fixedPriceBuilder = null;
      this.fixedPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fixedPrice' field has been set.
      * @return True if the 'fixedPrice' field has been set, false otherwise.
      */
    public boolean hasFixedPrice() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'fixedPrice' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.FixedPrice.Builder getFixedPriceBuilder() {
      if (fixedPriceBuilder == null) {
        if (hasFixedPrice()) {
          setFixedPriceBuilder(com.pagisoft.datafetcher.model.allegro.FixedPrice.newBuilder(fixedPrice));
        } else {
          setFixedPriceBuilder(com.pagisoft.datafetcher.model.allegro.FixedPrice.newBuilder());
        }
      }
      return fixedPriceBuilder;
    }

    /**
     * Sets the Builder instance for the 'fixedPrice' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder setFixedPriceBuilder(com.pagisoft.datafetcher.model.allegro.FixedPrice.Builder value) {
      clearFixedPrice();
      fixedPriceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fixedPrice' field has an active Builder instance
     * @return True if the 'fixedPrice' field has an active Builder instance
     */
    public boolean hasFixedPriceBuilder() {
      return fixedPriceBuilder != null;
    }

    /**
      * Clears the value of the 'fixedPrice' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder clearFixedPrice() {
      fixedPrice = null;
      fixedPriceBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'popularity' field.
      * @return The value.
      */
    public java.lang.Long getPopularity() {
      return popularity;
    }

    /**
      * Sets the value of the 'popularity' field.
      * @param value The value of 'popularity'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder setPopularity(long value) {
      validate(fields()[3], value);
      this.popularity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'popularity' field has been set.
      * @return True if the 'popularity' field has been set, false otherwise.
      */
    public boolean hasPopularity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'popularity' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder clearPopularity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidCount' field.
      * @return The value.
      */
    public java.lang.Long getBidCount() {
      return bidCount;
    }

    /**
      * Sets the value of the 'bidCount' field.
      * @param value The value of 'bidCount'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder setBidCount(long value) {
      validate(fields()[4], value);
      this.bidCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bidCount' field has been set.
      * @return True if the 'bidCount' field has been set, false otherwise.
      */
    public boolean hasBidCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bidCount' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.SellingMode.Builder clearBidCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SellingMode build() {
      try {
        SellingMode record = new SellingMode();
        record.format = fieldSetFlags()[0] ? this.format : (java.lang.String) defaultValue(fields()[0]);
        if (priceBuilder != null) {
          record.price = this.priceBuilder.build();
        } else {
          record.price = fieldSetFlags()[1] ? this.price : (com.pagisoft.datafetcher.model.allegro.Price) defaultValue(fields()[1]);
        }
        if (fixedPriceBuilder != null) {
          record.fixedPrice = this.fixedPriceBuilder.build();
        } else {
          record.fixedPrice = fieldSetFlags()[2] ? this.fixedPrice : (com.pagisoft.datafetcher.model.allegro.FixedPrice) defaultValue(fields()[2]);
        }
        record.popularity = fieldSetFlags()[3] ? this.popularity : (java.lang.Long) defaultValue(fields()[3]);
        record.bidCount = fieldSetFlags()[4] ? this.bidCount : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SellingMode>
    WRITER$ = (org.apache.avro.io.DatumWriter<SellingMode>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SellingMode>
    READER$ = (org.apache.avro.io.DatumReader<SellingMode>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
