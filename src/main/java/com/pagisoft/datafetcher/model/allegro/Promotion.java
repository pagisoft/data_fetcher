/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pagisoft.datafetcher.model.allegro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Promotion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -696619094522802198L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Promotion\",\"namespace\":\"com.pagisoft.datafetcher.model.allegro\",\"fields\":[{\"name\":\"emphasized\",\"type\":\"boolean\"},{\"name\":\"bold\",\"type\":\"boolean\"},{\"name\":\"highlight\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Promotion> ENCODER =
      new BinaryMessageEncoder<Promotion>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Promotion> DECODER =
      new BinaryMessageDecoder<Promotion>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Promotion> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Promotion> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Promotion>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Promotion to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Promotion from a ByteBuffer. */
  public static Promotion fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public boolean emphasized;
  @Deprecated public boolean bold;
  @Deprecated public boolean highlight;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Promotion() {}

  /**
   * All-args constructor.
   * @param emphasized The new value for emphasized
   * @param bold The new value for bold
   * @param highlight The new value for highlight
   */
  public Promotion(java.lang.Boolean emphasized, java.lang.Boolean bold, java.lang.Boolean highlight) {
    this.emphasized = emphasized;
    this.bold = bold;
    this.highlight = highlight;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return emphasized;
    case 1: return bold;
    case 2: return highlight;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: emphasized = (java.lang.Boolean)value$; break;
    case 1: bold = (java.lang.Boolean)value$; break;
    case 2: highlight = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emphasized' field.
   * @return The value of the 'emphasized' field.
   */
  public java.lang.Boolean getEmphasized() {
    return emphasized;
  }

  /**
   * Sets the value of the 'emphasized' field.
   * @param value the value to set.
   */
  public void setEmphasized(java.lang.Boolean value) {
    this.emphasized = value;
  }

  /**
   * Gets the value of the 'bold' field.
   * @return The value of the 'bold' field.
   */
  public java.lang.Boolean getBold() {
    return bold;
  }

  /**
   * Sets the value of the 'bold' field.
   * @param value the value to set.
   */
  public void setBold(java.lang.Boolean value) {
    this.bold = value;
  }

  /**
   * Gets the value of the 'highlight' field.
   * @return The value of the 'highlight' field.
   */
  public java.lang.Boolean getHighlight() {
    return highlight;
  }

  /**
   * Sets the value of the 'highlight' field.
   * @param value the value to set.
   */
  public void setHighlight(java.lang.Boolean value) {
    this.highlight = value;
  }

  /**
   * Creates a new Promotion RecordBuilder.
   * @return A new Promotion RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Promotion.Builder newBuilder() {
    return new com.pagisoft.datafetcher.model.allegro.Promotion.Builder();
  }

  /**
   * Creates a new Promotion RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Promotion RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Promotion.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.Promotion.Builder other) {
    return new com.pagisoft.datafetcher.model.allegro.Promotion.Builder(other);
  }

  /**
   * Creates a new Promotion RecordBuilder by copying an existing Promotion instance.
   * @param other The existing instance to copy.
   * @return A new Promotion RecordBuilder
   */
  public static com.pagisoft.datafetcher.model.allegro.Promotion.Builder newBuilder(com.pagisoft.datafetcher.model.allegro.Promotion other) {
    return new com.pagisoft.datafetcher.model.allegro.Promotion.Builder(other);
  }

  /**
   * RecordBuilder for Promotion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Promotion>
    implements org.apache.avro.data.RecordBuilder<Promotion> {

    private boolean emphasized;
    private boolean bold;
    private boolean highlight;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.Promotion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.emphasized)) {
        this.emphasized = data().deepCopy(fields()[0].schema(), other.emphasized);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bold)) {
        this.bold = data().deepCopy(fields()[1].schema(), other.bold);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.highlight)) {
        this.highlight = data().deepCopy(fields()[2].schema(), other.highlight);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Promotion instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pagisoft.datafetcher.model.allegro.Promotion other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.emphasized)) {
        this.emphasized = data().deepCopy(fields()[0].schema(), other.emphasized);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bold)) {
        this.bold = data().deepCopy(fields()[1].schema(), other.bold);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.highlight)) {
        this.highlight = data().deepCopy(fields()[2].schema(), other.highlight);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'emphasized' field.
      * @return The value.
      */
    public java.lang.Boolean getEmphasized() {
      return emphasized;
    }

    /**
      * Sets the value of the 'emphasized' field.
      * @param value The value of 'emphasized'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Promotion.Builder setEmphasized(boolean value) {
      validate(fields()[0], value);
      this.emphasized = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'emphasized' field has been set.
      * @return True if the 'emphasized' field has been set, false otherwise.
      */
    public boolean hasEmphasized() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'emphasized' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Promotion.Builder clearEmphasized() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bold' field.
      * @return The value.
      */
    public java.lang.Boolean getBold() {
      return bold;
    }

    /**
      * Sets the value of the 'bold' field.
      * @param value The value of 'bold'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Promotion.Builder setBold(boolean value) {
      validate(fields()[1], value);
      this.bold = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bold' field has been set.
      * @return True if the 'bold' field has been set, false otherwise.
      */
    public boolean hasBold() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bold' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Promotion.Builder clearBold() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'highlight' field.
      * @return The value.
      */
    public java.lang.Boolean getHighlight() {
      return highlight;
    }

    /**
      * Sets the value of the 'highlight' field.
      * @param value The value of 'highlight'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Promotion.Builder setHighlight(boolean value) {
      validate(fields()[2], value);
      this.highlight = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'highlight' field has been set.
      * @return True if the 'highlight' field has been set, false otherwise.
      */
    public boolean hasHighlight() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'highlight' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.model.allegro.Promotion.Builder clearHighlight() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Promotion build() {
      try {
        Promotion record = new Promotion();
        record.emphasized = fieldSetFlags()[0] ? this.emphasized : (java.lang.Boolean) defaultValue(fields()[0]);
        record.bold = fieldSetFlags()[1] ? this.bold : (java.lang.Boolean) defaultValue(fields()[1]);
        record.highlight = fieldSetFlags()[2] ? this.highlight : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Promotion>
    WRITER$ = (org.apache.avro.io.DatumWriter<Promotion>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Promotion>
    READER$ = (org.apache.avro.io.DatumReader<Promotion>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
