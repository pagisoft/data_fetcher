/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pagisoft.datafetcher.domain.allegro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestObject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8430378369479960332L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestObject\",\"namespace\":\"com.pagisoft.datafetcher.domain.allegro\",\"fields\":[{\"name\":\"objectId\",\"type\":\"long\"},{\"name\":\"objectName\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestObject> ENCODER =
      new BinaryMessageEncoder<TestObject>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestObject> DECODER =
      new BinaryMessageDecoder<TestObject>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TestObject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TestObject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestObject>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TestObject to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TestObject from a ByteBuffer. */
  public static TestObject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long objectId;
  @Deprecated public java.lang.CharSequence objectName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestObject() {}

  /**
   * All-args constructor.
   * @param objectId The new value for objectId
   * @param objectName The new value for objectName
   */
  public TestObject(java.lang.Long objectId, java.lang.CharSequence objectName) {
    this.objectId = objectId;
    this.objectName = objectName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return objectId;
    case 1: return objectName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: objectId = (java.lang.Long)value$; break;
    case 1: objectName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'objectId' field.
   * @return The value of the 'objectId' field.
   */
  public java.lang.Long getObjectId() {
    return objectId;
  }

  /**
   * Sets the value of the 'objectId' field.
   * @param value the value to set.
   */
  public void setObjectId(java.lang.Long value) {
    this.objectId = value;
  }

  /**
   * Gets the value of the 'objectName' field.
   * @return The value of the 'objectName' field.
   */
  public java.lang.CharSequence getObjectName() {
    return objectName;
  }

  /**
   * Sets the value of the 'objectName' field.
   * @param value the value to set.
   */
  public void setObjectName(java.lang.CharSequence value) {
    this.objectName = value;
  }

  /**
   * Creates a new TestObject RecordBuilder.
   * @return A new TestObject RecordBuilder
   */
  public static com.pagisoft.datafetcher.domain.allegro.TestObject.Builder newBuilder() {
    return new com.pagisoft.datafetcher.domain.allegro.TestObject.Builder();
  }

  /**
   * Creates a new TestObject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestObject RecordBuilder
   */
  public static com.pagisoft.datafetcher.domain.allegro.TestObject.Builder newBuilder(com.pagisoft.datafetcher.domain.allegro.TestObject.Builder other) {
    return new com.pagisoft.datafetcher.domain.allegro.TestObject.Builder(other);
  }

  /**
   * Creates a new TestObject RecordBuilder by copying an existing TestObject instance.
   * @param other The existing instance to copy.
   * @return A new TestObject RecordBuilder
   */
  public static com.pagisoft.datafetcher.domain.allegro.TestObject.Builder newBuilder(com.pagisoft.datafetcher.domain.allegro.TestObject other) {
    return new com.pagisoft.datafetcher.domain.allegro.TestObject.Builder(other);
  }

  /**
   * RecordBuilder for TestObject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestObject>
    implements org.apache.avro.data.RecordBuilder<TestObject> {

    private long objectId;
    private java.lang.CharSequence objectName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pagisoft.datafetcher.domain.allegro.TestObject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.objectId)) {
        this.objectId = data().deepCopy(fields()[0].schema(), other.objectId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.objectName)) {
        this.objectName = data().deepCopy(fields()[1].schema(), other.objectName);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TestObject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pagisoft.datafetcher.domain.allegro.TestObject other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.objectId)) {
        this.objectId = data().deepCopy(fields()[0].schema(), other.objectId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.objectName)) {
        this.objectName = data().deepCopy(fields()[1].schema(), other.objectName);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'objectId' field.
      * @return The value.
      */
    public java.lang.Long getObjectId() {
      return objectId;
    }

    /**
      * Sets the value of the 'objectId' field.
      * @param value The value of 'objectId'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.domain.allegro.TestObject.Builder setObjectId(long value) {
      validate(fields()[0], value);
      this.objectId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'objectId' field has been set.
      * @return True if the 'objectId' field has been set, false otherwise.
      */
    public boolean hasObjectId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'objectId' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.domain.allegro.TestObject.Builder clearObjectId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'objectName' field.
      * @return The value.
      */
    public java.lang.CharSequence getObjectName() {
      return objectName;
    }

    /**
      * Sets the value of the 'objectName' field.
      * @param value The value of 'objectName'.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.domain.allegro.TestObject.Builder setObjectName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.objectName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'objectName' field has been set.
      * @return True if the 'objectName' field has been set, false otherwise.
      */
    public boolean hasObjectName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'objectName' field.
      * @return This builder.
      */
    public com.pagisoft.datafetcher.domain.allegro.TestObject.Builder clearObjectName() {
      objectName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestObject build() {
      try {
        TestObject record = new TestObject();
        record.objectId = fieldSetFlags()[0] ? this.objectId : (java.lang.Long) defaultValue(fields()[0]);
        record.objectName = fieldSetFlags()[1] ? this.objectName : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestObject>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestObject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestObject>
    READER$ = (org.apache.avro.io.DatumReader<TestObject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
